name: CI
on: [push, pull_request]

env:
  TEE_DIR: ~/test
  base_script: |
    pwd
    cd $HOME/another_dir
    pwd
  set_ccache: |
    echo "::set-env name=CCACHE_DIR::$HOME/.ccache"
  

jobs:
  build:
    runs-on: ubuntu-latest
   
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: Set ccache
        run: eval ${{ env.set_ccache }}

      - name: "Permissions"
        run: |
          chmod +x $GITHUB_WORKSPACE/.github/workflows/base_script.sh
          
      - name: "Step 1"
        run: |
          mkdir -p $HOME/another_dir
          cd $HOME/another_dir
          pwd
          export VAR1="$(pwd)"
    
      - name: "Using variable from last step"
        run: |
          pwd
          cd ${VAR1}
          pwd

      - name: "Base script env"
        run: |
          eval "$base_script"
          mkdir -p $GITHUB_WORKSPACE/Build/linux/
          cd $GITHUB_WORKSPACE/Build/linux/
          eval "$base_script"

      - name: "Base script file"
        run: |
           $GITHUB_WORKSPACE/.github/workflows/base_script.sh
           mkdir -p $GITHUB_WORKSPACE/Build/Linux/
           cd $GITHUB_WORKSPACE/Build/Linux/
           $GITHUB_WORKSPACE/.github/workflows/base_script.sh

      - name: Prepare cache hash
        id: cache_hash
        run: |
          echo "::set-output name=hash::${{ hashFiles('**/*.yml') }}"

      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .
          key: cache-${{ steps.cache_hash.outputs.hash }}
          restore-keys: |
            cache-
            
      - name: This should fail
        id: failure_test
        continue-on-error: true
        run: |
          echo "value1" > value1.txt
          echo "value2" > value2.txt
          diff value1.txt value2.txt

      - name: Create artifact
        if: steps.failure_test.outcome != 'success'
        run: tar cf ./value.tar.gz value*
        
      - name: On fail, upload artifact
        if: steps.failure_test.outputs.status != 'success'
        uses: actions/upload-artifact@v1
        with:
          name: value
          path: ./value.tar.gz
          
      - name: ccache variable
        run: |
          echo "$CCACHE_DIR" > ccache.txt
          sudo mkdir -p $CCACHE_DIR
          ls -al $HOME
          sudo chown -R "$USER": $CCACHE_DIR
          ls -al $HOME
          pwd
          cd $CCACHE_DIR
          pwd

      - name: tee test
        run: |
          echo 1 | sudo tee -a ${{ env.TEE_DIR }}
          ls -l $HOME

  ccache:
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: Set ccache
        run: eval ${{ env.set_ccache }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install ccache gcc
    
      - name: "CCACHE TEST"
        run: |
          sudo -E /usr/lib/ccache/gcc .github/workflows/test.c
          sudo -E ccache -s
          ls -la $HOME
          ls -la
          ls -la ~
          
      - name: Check ccache_dir
        run: |
          cd $CCACHE_DIR
          pwd
          ls -a
          
  videos:
    runs-on: ubuntu-latest
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      
      - name: Download videos
        run: |
          for url in raw.githubusercontent.com/OpenVisualCloud/SVT-AV1-Resources/master randomderp.com; do
            curl -Lo videos/video.tar.gz https://$url/video.tar.gz --create-dirs && break
          done
          tar -xf videos/video.tar.gz -C videos
        
      - name: Cache videos
        uses: actions/cache@v1
        with:
          path: videos
          key: videos2-${{ hashFiles('videos/video.tar.gz') }}
  
  test-videos:
    runs-on: ubuntu-latest
    needs: videos
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      
      - name: Cache videos
        id: cache-videos
        uses: actions/cache@v1
        with:
          path: videos
          key: videos2-${{ hashFiles('videos/video.tar.gz') }}
          restore-keys: videos2-
      
      - name: Download videos if cache does not exist
        if: steps.cache-videos.outputs.cache-hit != 'true'
        run: |
          for url in raw.githubusercontent.com/OpenVisualCloud/SVT-AV1-Resources/master randomderp.com; do
            curl -Lo videos/video.tar.gz https://$url/video.tar.gz --create-dirs && break
          done
          tar -xf videos/video.tar.gz -C videos
      
      - name: Check videos
        run: |
          ls -l videos/
          du -h videos/*.y4m
